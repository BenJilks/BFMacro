use crate::ast::{Program, Definition, FrameDefinition, SlotDefinition, Macro, Parameter, Using};
use crate::ast::{Variable, Argument, Block, Instruction};
use crate::ast::Identifier;

grammar;

pub Program: Program = (<Definition>)*;

Definition: Definition = {
    "include" <String> =>
        Definition::Include(<>),

    "frame" <name: Identifier> "{" <slots: (<Slot>)*> "}" =>
        Definition::Frame(FrameDefinition { name, slots }),

    "macro" <name: Identifier> "(" <parameters: ParameterList> ")" <block: Block> =>
        Definition::Macro(Macro { name, parameters, block }),

    "using" <frame: Identifier> <block: Block> => 
        Definition::Using(Using { frame, block }),
}

ParameterList: Vec<Parameter> = {
    <parameters: (<Parameter> ",")*> <last: Parameter?> => {
        let mut parameters = parameters;
        parameters.extend(last);
        parameters
    }
}

Parameter: Parameter = {
    <Identifier> => Parameter::Slot(<>),
    <Identifier> ":" "block" => Parameter::Block(<>),
    <Identifier> ":" <Identifier> => Parameter::SubFrame(<>),
}

Slot: SlotDefinition = {
    <Identifier> => SlotDefinition::Variable(<>),
    <name: Identifier> ":" <frame: Identifier> => SlotDefinition::SubFrame(name, frame),
}

Block: Block = {
    <l: @L> "{" <instructions: (<Instruction>)*> "}" <r: @R> =>
        Block { instructions: instructions, span: (l, r), file_path: None },
}

Instruction: Instruction = {
    "+" => Instruction::Add,
    "-" => Instruction::Subtract,
    <l: @L> "<" <r: @R> => Instruction::Left((l, r)),
    <l: @L> ">" <r: @R> => Instruction::Right((l, r)),
    "," => Instruction::Input,
    "@" => Instruction::Output,
    "[" => Instruction::OpenLoop,
    "]" => Instruction::CloseLoop,
    "moving" <Block> => Instruction::MovingBlock(<>),
    "using" <frame: Identifier> <block: Block> => Instruction::Using(Using { frame, block }),
    <Variable> => Instruction::Variable(<>),

    <name: Identifier> "(" <arguments: ArgumentList> ")" =>
        Instruction::MacroInvoke(name, arguments),
}

ArgumentList: Vec<Argument> = {
    <arguments: (<Argument> ",")*> <last: Argument?> => {
        let mut arguments = arguments;
        arguments.extend(last);
        arguments
    }
}

Argument: Argument = {
    <Variable> => Argument::Variable(<>),
    <Block> => Argument::Block(<>),
}

Variable: Variable = {
    <first: Identifier> <path: ("." <Identifier>)*> => {
        let mut path = path;
        path.insert(0, first);
        path
    },
}

Identifier: Identifier = {
    <l: @L> <s:r"[a-zA-Z_][a-zA-Z0-9_]*"> <r: @R> => {
        Identifier {
            value: s.to_owned(),
            span: (l, r),
        }
    },
}

String: String = <s:r#""[^"]*""#> => s[1..s.len()-1].to_owned();

match {
    r"\s*" => {},
    r"#.*\n" => {},
} else {
    _
}
