use crate::ast::{Program, Variable, Definition, FrameDefinition, SlotDefinition, Macro, Using, Instruction};

grammar;

pub Program: Program = (<Definition>)*;

Definition: Definition = {
    "include" <String> =>
        Definition::Include(<>),

    "frame" <name: Identifier> "{" <slots: (<Slot>)*> "}" =>
        Definition::Frame(FrameDefinition { name, slots }),

    "macro" <name: Identifier> "(" <parameters: ParameterList> ")" "{" <block: Block> "}" =>
        Definition::Macro(Macro { name, parameters, block }),

    "using" <frame: Identifier> "{" <block: Block> "}" => 
        Definition::Using(Using { frame, block }),
}

ParameterList: Vec<String> = {
    <parameters: (<Identifier> ",")*> <last: Identifier?> => {
        let mut parameters = parameters;
        parameters.extend(last);
        parameters
    }
}

Slot: SlotDefinition = {
    <Identifier> => SlotDefinition::Variable(<>),
    <name: Identifier> ":" <frame: Identifier> => SlotDefinition::SubFrame(name, frame),
}

Block = (<Instruction>)*;

Instruction: Instruction = {
    "+" => Instruction::Add,
    "-" => Instruction::Subtract,
    "<" => Instruction::Left,
    ">" => Instruction::Right,
    "," => Instruction::Input,
    "@" => Instruction::Output,
    "[" => Instruction::OpenLoop,
    "]" => Instruction::CloseLoop,
    "moving" "{" <Block> "}" => Instruction::MovingBlock(<>),
    "using" <frame: Identifier> "{" <block: Block> "}" => Instruction::Using(Using { frame, block }),
    <Variable> => Instruction::Variable(<>),

    <name: Identifier> "(" <arguments: VariableList> ")" =>
        Instruction::MacroInvoke(name, arguments),
}

VariableList: Vec<Variable> = {
    <variables: (<Variable> ",")*> <last: Variable?> => {
        let mut variables = variables;
        variables.extend(last);
        variables
    }
}

Variable: Variable = {
    <first: Identifier> <path: ("." <Identifier>)*> => {
        let mut path = path;
        path.insert(0, first);
        path
    },
}

Identifier: String = <s:r"[a-zA-Z_][a-zA-Z0-9_]*"> => s.to_owned();
String: String = <s:r#""[^"]*""#> => s[1..s.len()-1].to_owned();
